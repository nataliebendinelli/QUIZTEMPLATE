{"version":3,"file":"tracing-headers.js","sources":["../src/utils/globals.ts","../src/utils/type-utils.ts","../src/extensions/replay/rrweb-plugins/patch.ts","../src/entrypoints/tracing-headers.ts"],"sourcesContent":["import { ErrorProperties } from '../extensions/exception-autocapture/error-conversion'\nimport type { PostHog } from '../posthog-core'\nimport { SessionIdManager } from '../sessionid'\nimport { DeadClicksAutoCaptureConfig, ExternalIntegrationKind, RemoteConfig, SiteAppLoader } from '../types'\n\n/*\n * Global helpers to protect access to browser globals in a way that is safer for different targets\n * like DOM, SSR, Web workers etc.\n *\n * NOTE: Typically we want the \"window\" but globalThis works for both the typical browser context as\n * well as other contexts such as the web worker context. Window is still exported for any bits that explicitly require it.\n * If in doubt - export the global you need from this file and use that as an optional value. This way the code path is forced\n * to handle the case where the global is not available.\n */\n\n// eslint-disable-next-line no-restricted-globals\nconst win: (Window & typeof globalThis) | undefined = typeof window !== 'undefined' ? window : undefined\n\nexport type AssignableWindow = Window &\n    typeof globalThis & {\n        /*\n         * Main PostHog instance\n         */\n        posthog: any\n\n        /*\n         * This is our contract between (potentially) lazily loaded extensions and the SDK\n         */\n        __PosthogExtensions__?: PostHogExtensions\n\n        /**\n         * When loading remote config, we assign it to this global configuration\n         * for ease of sharing it with the rest of the SDK\n         */\n        _POSTHOG_REMOTE_CONFIG?: Record<\n            string,\n            {\n                config: RemoteConfig\n                siteApps: SiteAppLoader[]\n            }\n        >\n\n        /**\n         * If this is set on the window, our logger will log to the console\n         * for ease of debugging. Used for testing purposes only.\n         *\n         * @see {Config.DEBUG} from config.ts\n         */\n        POSTHOG_DEBUG: any\n\n        // Exposed by the browser\n        doNotTrack: any\n\n        // See entrypoints/customizations.full.ts\n        posthogCustomizations: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/exception-autocapture.ts\n         *\n         * @deprecated use `__PosthogExtensions__.errorWrappingFunctions` instead\n         */\n        posthogErrorWrappingFunctions: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/posthog-recorder.ts\n         *\n         * @deprecated use `__PosthogExtensions__.rrweb` instead\n         */\n        rrweb: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/posthog-recorder.ts\n         *\n         * @deprecated use `__PosthogExtensions__.rrwebConsoleRecord` instead\n         */\n        rrwebConsoleRecord: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/posthog-recorder.ts\n         *\n         * @deprecated use `__PosthogExtensions__.getRecordNetworkPlugin` instead\n         */\n        getRecordNetworkPlugin: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/web-vitals.ts\n         *\n         * @deprecated use `__PosthogExtensions__.postHogWebVitalsCallbacks` instead\n         */\n        postHogWebVitalsCallbacks: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/tracing-headers.ts\n         *\n         * @deprecated use `__PosthogExtensions__.postHogTracingHeadersPatchFns` instead\n         */\n        postHogTracingHeadersPatchFns: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/surveys.ts\n         *\n         * @deprecated use `__PosthogExtensions__.generateSurveys` instead\n         */\n        extendPostHogWithSurveys: any\n\n        /*\n         * These are used to handle our toolbar state.\n         * @see {Toolbar} from extensions/toolbar.ts\n         */\n        ph_load_toolbar: any\n        ph_load_editor: any\n        ph_toolbar_state: any\n    } & Record<`__$$ph_site_app_${string}`, any>\n\n/**\n * This is our contract between (potentially) lazily loaded extensions and the SDK\n * changes to this interface can be breaking changes for users of the SDK\n */\n\nexport type ExternalExtensionKind = 'intercom-integration' | 'crisp-chat-integration'\n\nexport type PostHogExtensionKind =\n    | 'toolbar'\n    | 'exception-autocapture'\n    | 'web-vitals'\n    | 'recorder'\n    | 'tracing-headers'\n    | 'surveys'\n    | 'dead-clicks-autocapture'\n    | 'remote-config'\n    | ExternalExtensionKind\n\nexport interface LazyLoadedDeadClicksAutocaptureInterface {\n    start: (observerTarget: Node) => void\n    stop: () => void\n}\n\ninterface PostHogExtensions {\n    loadExternalDependency?: (\n        posthog: PostHog,\n        kind: PostHogExtensionKind,\n        callback: (error?: string | Event, event?: Event) => void\n    ) => void\n\n    loadSiteApp?: (posthog: PostHog, appUrl: string, callback: (error?: string | Event, event?: Event) => void) => void\n\n    errorWrappingFunctions?: {\n        wrapOnError: (captureFn: (props: ErrorProperties) => void) => () => void\n        wrapUnhandledRejection: (captureFn: (props: ErrorProperties) => void) => () => void\n        wrapConsoleError: (captureFn: (props: ErrorProperties) => void) => () => void\n    }\n    rrweb?: { record: any; version: string }\n    rrwebPlugins?: { getRecordConsolePlugin: any; getRecordNetworkPlugin?: any }\n    generateSurveys?: (posthog: PostHog, isSurveysEnabled: boolean) => any | undefined\n    postHogWebVitalsCallbacks?: {\n        onLCP: (metric: any) => void\n        onCLS: (metric: any) => void\n        onFCP: (metric: any) => void\n        onINP: (metric: any) => void\n    }\n    tracingHeadersPatchFns?: {\n        _patchFetch: (hostnames: string[], distinctId: string, sessionManager?: SessionIdManager) => () => void\n        _patchXHR: (hostnames: string[], distinctId: string, sessionManager?: SessionIdManager) => () => void\n    }\n    initDeadClicksAutocapture?: (\n        ph: PostHog,\n        config: DeadClicksAutoCaptureConfig\n    ) => LazyLoadedDeadClicksAutocaptureInterface\n    integrations?: {\n        [K in ExternalIntegrationKind]?: { start: (posthog: PostHog) => void; stop: () => void }\n    }\n}\n\nconst global: typeof globalThis | undefined = typeof globalThis !== 'undefined' ? globalThis : win\n\nexport const ArrayProto = Array.prototype\nexport const nativeForEach = ArrayProto.forEach\nexport const nativeIndexOf = ArrayProto.indexOf\n\nexport const navigator = global?.navigator\nexport const document = global?.document\nexport const location = global?.location\nexport const fetch = global?.fetch\nexport const XMLHttpRequest =\n    global?.XMLHttpRequest && 'withCredentials' in new global.XMLHttpRequest() ? global.XMLHttpRequest : undefined\nexport const AbortController = global?.AbortController\nexport const userAgent = navigator?.userAgent\nexport const assignableWindow: AssignableWindow = win ?? ({} as any)\n\nexport { win as window }\n","import { window } from './globals'\nimport { knownUnsafeEditableEvent, KnownUnsafeEditableEvent } from '../types'\nimport { includes } from './string-utils'\n\n// eslint-disable-next-line posthog-js/no-direct-array-check\nconst nativeIsArray = Array.isArray\nconst ObjProto = Object.prototype\nexport const hasOwnProperty = ObjProto.hasOwnProperty\nconst toString = ObjProto.toString\n\nexport const isArray =\n    nativeIsArray ||\n    function (obj: any): obj is any[] {\n        return toString.call(obj) === '[object Array]'\n    }\n\n// from a comment on http://dbj.org/dbj/?p=286\n// fails on only one very rare and deliberate custom object:\n// let bomb = { toString : undefined, valueOf: function(o) { return \"function BOMBA!\"; }};\nexport const isFunction = (x: unknown): x is (...args: any[]) => any => {\n    // eslint-disable-next-line posthog-js/no-direct-function-check\n    return typeof x === 'function'\n}\n\nexport const isNativeFunction = (x: unknown): x is (...args: any[]) => any =>\n    isFunction(x) && x.toString().indexOf('[native code]') !== -1\n\n// When angular patches functions they pass the above `isNativeFunction` check (at least the MutationObserver)\nexport const isAngularZonePresent = (): boolean => {\n    return !!(window as any).Zone\n}\n\n// Underscore Addons\nexport const isObject = (x: unknown): x is Record<string, any> => {\n    // eslint-disable-next-line posthog-js/no-direct-object-check\n    return x === Object(x) && !isArray(x)\n}\nexport const isEmptyObject = (x: unknown) => {\n    if (isObject(x)) {\n        for (const key in x) {\n            if (hasOwnProperty.call(x, key)) {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\nexport const isUndefined = (x: unknown): x is undefined => x === void 0\n\nexport const isString = (x: unknown): x is string => {\n    // eslint-disable-next-line posthog-js/no-direct-string-check\n    return toString.call(x) == '[object String]'\n}\n\nexport const isEmptyString = (x: unknown): boolean => isString(x) && x.trim().length === 0\n\nexport const isNull = (x: unknown): x is null => {\n    // eslint-disable-next-line posthog-js/no-direct-null-check\n    return x === null\n}\n\n/*\n    sometimes you want to check if something is null or undefined\n    that's what this is for\n */\nexport const isNullish = (x: unknown): x is null | undefined => isUndefined(x) || isNull(x)\n\nexport const isNumber = (x: unknown): x is number => {\n    // eslint-disable-next-line posthog-js/no-direct-number-check\n    return toString.call(x) == '[object Number]'\n}\nexport const isBoolean = (x: unknown): x is boolean => {\n    // eslint-disable-next-line posthog-js/no-direct-boolean-check\n    return toString.call(x) === '[object Boolean]'\n}\n\nexport const isDocument = (x: unknown): x is Document => {\n    // eslint-disable-next-line posthog-js/no-direct-document-check\n    return x instanceof Document\n}\n\nexport const isFormData = (x: unknown): x is FormData => {\n    // eslint-disable-next-line posthog-js/no-direct-form-data-check\n    return x instanceof FormData\n}\n\nexport const isFile = (x: unknown): x is File => {\n    // eslint-disable-next-line posthog-js/no-direct-file-check\n    return x instanceof File\n}\n\nexport const isError = (x: unknown): x is Error => {\n    return x instanceof Error\n}\n\nexport const isKnownUnsafeEditableEvent = (x: unknown): x is KnownUnsafeEditableEvent => {\n    return includes(knownUnsafeEditableEvent as unknown as string[], x)\n}\n","// import { patch } from 'rrweb/typings/utils'\n// copied from https://github.com/rrweb-io/rrweb/blob/8aea5b00a4dfe5a6f59bd2ae72bb624f45e51e81/packages/rrweb/src/utils.ts#L129\n// which was copied from https://github.com/getsentry/sentry-javascript/blob/b2109071975af8bf0316d3b5b38f519bdaf5dc15/packages/utils/src/object.ts\nimport { isFunction } from '../../../utils/type-utils'\n\nexport function patch(\n    source: { [key: string]: any },\n    name: string,\n    replacement: (...args: unknown[]) => unknown\n): () => void {\n    try {\n        if (!(name in source)) {\n            return () => {\n                //\n            }\n        }\n\n        const original = source[name] as () => unknown\n        const wrapped = replacement(original)\n\n        // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n        // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n        if (isFunction(wrapped)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            wrapped.prototype = wrapped.prototype || {}\n            Object.defineProperties(wrapped, {\n                __posthog_wrapped__: {\n                    enumerable: false,\n                    value: true,\n                },\n            })\n        }\n\n        source[name] = wrapped\n\n        return () => {\n            source[name] = original\n        }\n    } catch {\n        return () => {\n            //\n        }\n        // This can throw if multiple fill happens on a global object like XMLHttpRequest\n        // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n}\n","import { SessionIdManager } from '../sessionid'\nimport { patch } from '../extensions/replay/rrweb-plugins/patch'\nimport { assignableWindow, window } from '../utils/globals'\nimport { isArray } from '../utils/type-utils'\n\nconst addTracingHeaders = (\n    hostnames: string[],\n    distinctId: string,\n    sessionManager: SessionIdManager | undefined,\n    req: Request\n) => {\n    let reqHostname: string\n    try {\n        // we don't need to support IE11 here\n        // eslint-disable-next-line compat/compat\n        reqHostname = new URL(req.url).hostname\n    } catch {\n        // If the URL is invalid, we skip adding tracing headers\n        return\n    }\n    if (isArray(hostnames) && !hostnames.includes(reqHostname)) {\n        // Skip if the hostname is not in the list (also skip if hostnames is not an array,\n        // because in the earliest version of this __add_tracing_headers was a bool)\n        return\n    }\n\n    if (sessionManager) {\n        const { sessionId, windowId } = sessionManager.checkAndGetSessionAndWindowId(true)\n        req.headers.set('X-POSTHOG-SESSION-ID', sessionId)\n        req.headers.set('X-POSTHOG-WINDOW-ID', windowId)\n    }\n    req.headers.set('X-POSTHOG-DISTINCT-ID', distinctId)\n}\n\nconst patchFetch = (hostnames: string[], distinctId: string, sessionManager?: SessionIdManager): (() => void) => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return patch(window, 'fetch', (originalFetch: typeof fetch) => {\n        return async function (url: URL | RequestInfo, init?: RequestInit | undefined) {\n            // check IE earlier than this, we only initialize if Request is present\n            // eslint-disable-next-line compat/compat\n            const req = new Request(url, init)\n\n            addTracingHeaders(hostnames, distinctId, sessionManager, req)\n\n            return originalFetch(req)\n        }\n    })\n}\n\nconst patchXHR = (hostnames: string[], distinctId: string, sessionManager?: SessionIdManager): (() => void) => {\n    return patch(\n        // we can assert this is present because we've checked previously\n        window!.XMLHttpRequest.prototype,\n        'open',\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        (originalOpen: typeof XMLHttpRequest.prototype.open) => {\n            return function (\n                method: string,\n                url: string | URL,\n                async = true,\n                username?: string | null,\n                password?: string | null\n            ) {\n                // because this function is returned in its actual context `this` _is_ an XMLHttpRequest\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                const xhr = this as XMLHttpRequest\n\n                // check IE earlier than this, we only initialize if Request is present\n                // eslint-disable-next-line compat/compat\n                const req = new Request(url)\n\n                addTracingHeaders(hostnames, distinctId, sessionManager, req)\n\n                return originalOpen.call(xhr, method, req.url, async, username, password)\n            }\n        }\n    )\n}\n\nassignableWindow.__PosthogExtensions__ = assignableWindow.__PosthogExtensions__ || {}\nconst patchFns = {\n    _patchFetch: patchFetch,\n    _patchXHR: patchXHR,\n}\nassignableWindow.__PosthogExtensions__.tracingHeadersPatchFns = patchFns\n\n// we used to put tracingHeadersPatchFns on window, and now we put it on __PosthogExtensions__\n// but that means that old clients which lazily load this extension are looking in the wrong place\n// yuck,\n// so we also put it directly on the window\n// when 1.161.1 is the oldest version seen in production we can remove this\nassignableWindow.postHogTracingHeadersPatchFns = patchFns\n\nexport default patchFns\n"],"names":["win","window","undefined","global","globalThis","navigator","document","location","fetch","XMLHttpRequest","AbortController","userAgent","assignableWindow","nativeIsArray","Array","isArray","toString","Object","prototype","obj","call","patch","source","name","replacement","original","wrapped","defineProperties","__posthog_wrapped__","enumerable","value","_unused","addTracingHeaders","hostnames","distinctId","sessionManager","req","reqHostname","URL","url","hostname","includes","sessionId","windowId","checkAndGetSessionAndWindowId","headers","set","__PosthogExtensions__","patchFns","_patchFetch","patchFetch","originalFetch","_ref","init","Request","_x","_x2","apply","this","arguments","_patchXHR","patchXHR","originalOpen","method","async","username","password","tracingHeadersPatchFns","postHogTracingHeadersPatchFns"],"mappings":"kJAgBA,IAAMA,EAAkE,oBAAXC,OAAyBA,YAASC,EAkLzFC,EAA8D,oBAAfC,WAA6BA,WAAaJ,EAMlFK,EAAYF,MAAAA,OAAAA,EAAAA,EAAQE,UACTF,MAAAA,GAAAA,EAAQG,SACRH,MAAAA,GAAAA,EAAQI,SACXJ,MAAAA,GAAAA,EAAQK,YAEzBL,GAAAA,EAAQM,gBAAkB,oBAAqB,IAAIN,EAAOM,gBAAmBN,EAAOM,eACzDN,MAAAA,GAAAA,EAAQO,gBACdL,MAAAA,GAAAA,EAAWM,UAC7B,IAAMC,EAAqCZ,QAAAA,EAAQ,CAAU,EC3M9Da,EAAgBC,MAAMC,QAGtBC,EAFWC,OAAOC,UAEEF,SAEbD,EACTF,GACA,SAAUM,GACN,MAA8B,mBAAvBH,EAASI,KAAKD,EACzB,ECTG,SAASE,EACZC,EACAC,EACAC,GAEA,IACI,KAAMD,KAAQD,GACV,MAAO,OAKX,IAAMG,EAAWH,EAAOC,GAClBG,EAAUF,EAAYC,GAiB5B,MDdgB,mBCCDC,IAEXA,EAAQR,UAAYQ,EAAQR,WAAa,CAAE,EAC3CD,OAAOU,iBAAiBD,EAAS,CAC7BE,oBAAqB,CACjBC,YAAY,EACZC,OAAO,MAKnBR,EAAOC,GAAQG,EAER,KACHJ,EAAOC,GAAQE,CAAQ,CAE9B,CAAC,MAAAM,GACE,MAAO,MAKX,CACJ,CCxCA,IAAMC,EAAoBA,CACtBC,EACAC,EACAC,EACAC,KAEA,IAAIC,EACJ,IAGIA,EAAc,IAAIC,IAAIF,EAAIG,KAAKC,QAClC,CAAC,MAAAT,GAEE,MACJ,CACA,IAAIhB,EAAQkB,IAAeA,EAAUQ,SAASJ,GAA9C,CAMA,GAAIF,EAAgB,CAChB,IAAMO,UAAEA,EAASC,SAAEA,GAAaR,EAAeS,+BAA8B,GAC7ER,EAAIS,QAAQC,IAAI,uBAAwBJ,GACxCN,EAAIS,QAAQC,IAAI,sBAAuBH,EAC3C,CACAP,EAAIS,QAAQC,IAAI,wBAAyBZ,EAPzC,CAOoD,EAmDxDtB,EAAiBmC,sBAAwBnC,EAAiBmC,uBAAyB,CAAE,EACrF,IAAMC,EAAW,CACbC,YAlDeC,CAACjB,EAAqBC,EAAoBC,IAGlDd,EAAMpB,EAAQ,SAAUkD,GAC3B,WAAA,MAAAC,KAAO,UAAgBb,EAAwBc,GAG3C,IAAMjB,EAAM,IAAIkB,QAAQf,EAAKc,GAI7B,OAFArB,EAAkBC,EAAWC,EAAYC,EAAgBC,GAElDe,EAAcf,mLACxB,OAAAmB,SAAAA,EAAAC,GAAA,OAAAJ,EAAAK,MAAAC,KAAAC,UAAA,CAAA,CARD,KA+CJC,UAnCaC,CAAC5B,EAAqBC,EAAoBC,IAChDd,EAEHpB,EAAQQ,eAAeS,UACvB,QAGC4C,GACU,SACHC,EACAxB,EACAyB,EACAC,EACAC,QAFK,IAALF,IAAAA,GAAQ,GAOR,IAIM5B,EAAM,IAAIkB,QAAQf,GAIxB,OAFAP,EAAkBC,EAAWC,EAAYC,EAAgBC,GAElD0B,EAAa1C,KARRsC,KAQkBK,EAAQ3B,EAAIG,IAAKyB,EAAOC,EAAUC,EACnE,KAUbtD,EAAiBmC,sBAAsBoB,uBAAyBnB,EAOhEpC,EAAiBwD,8BAAgCpB"}